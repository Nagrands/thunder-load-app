// src/js/modules/contextMenu.js

import { setHistoryData, getHistoryData } from "./state.js";
import { filterAndSortHistory } from "./historyFilter.js";
import { urlInput, downloadButton } from "./domElements.js";
import { history, contextMenu } from "./domElements.js";
import { showToast } from "./toast.js";
import { showConfirmationDialog as showConfirmationModal } from "./modals.js";
import { updateDownloadCount, sortHistory } from "./history.js";
import { state, updateButtonState } from "./state.js";

/**
 * –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏
 */
let currentLogEntry = null;

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
 * @param {MouseEvent} event - –°–æ–±—ã—Ç–∏–µ –º—ã—à–∏
 * @param {HTMLElement} logEntry - –≠–ª–µ–º–µ–Ω—Ç –ª–æ–≥–∞
 */
async function showContextMenu(event, logEntry) {
  event.preventDefault();

  // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (currentLogEntry) {
    currentLogEntry.classList.remove("selected");
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–æ–≥ –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π
  currentLogEntry = logEntry;
  currentLogEntry.classList.add("selected");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
  const filePath = currentLogEntry
    .querySelector(".text")
    .getAttribute("data-filepath");
  console.log(`–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${filePath}`);
  let fileExists = false;
  if (filePath) {
    fileExists = await window.electron.invoke("check-file-exists", filePath);
    console.log(`–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fileExists}`);
  }

  // –û—Ç–∫–ª—é—á–∞–µ–º –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const openVideoItem = contextMenu.querySelector("#open-video");
  const openFolderItem = contextMenu.querySelector("#open-folderc");
  const deleteFileItem = contextMenu.querySelector("#delete-file");

  if (!fileExists) {
    openVideoItem.classList.add("disabled");
    openFolderItem.classList.add("disabled");
    deleteFileItem.classList.add("disabled");
  } else {
    openVideoItem.classList.remove("disabled");
    openFolderItem.classList.remove("disabled");
    deleteFileItem.classList.remove("disabled");
  }

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞
  const { clientX: mouseX, clientY: mouseY } = event;

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  contextMenu.style.display = "block"; // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã
  const menuRect = contextMenu.getBoundingClientRect();
  const menuWidth = menuRect.width;
  const menuHeight = menuRect.height;
  const windowWidth = window.innerWidth;
  const windowHeight = window.innerHeight;

  let adjustedX = mouseX;
  let adjustedY = mouseY;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –º–µ–Ω—é –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –æ–∫–Ω–∞
  if (mouseX + menuWidth > windowWidth) {
    adjustedX = windowWidth - menuWidth - 10;
  }

  if (mouseY + menuHeight > windowHeight) {
    adjustedY = windowHeight - menuHeight - 10;
  }

  if (adjustedY < 0) {
    adjustedY = 10;
  }

  if (adjustedX < 0) {
    adjustedX = 10;
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  contextMenu.style.top = `${adjustedY}px`;
  contextMenu.style.left = `${adjustedX}px`;
  contextMenu.style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
 */
function hideContextMenu() {
  contextMenu.style.display = "none";
  if (currentLogEntry) {
    currentLogEntry.classList.remove("selected");
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –º–µ–Ω—é
 * @param {MouseEvent} event - –°–æ–±—ã—Ç–∏–µ –º—ã—à–∏
 */
async function handleContextMenuClick(event) {
  const targetElement = event.target;
  const menuItem = targetElement.closest("li");

  if (!menuItem || !currentLogEntry) return;

  const action = menuItem.id;
  const filePath = currentLogEntry
    .querySelector(".text")
    .getAttribute("data-filepath");

  try {
    switch (action) {
      case "open-video":
        await handleOpenVideo(filePath);
        break;
      case "open-folderc":
        await handleOpenFolder(filePath);
        break;
      case "open-site":
        await handleOpenSite(currentLogEntry);
        break;
      case "delete-entry":
        await handleDeleteEntry(currentLogEntry);
        break;
      case "delete-file":
        await handleDeleteFile(currentLogEntry);
        break;
      case "retry-download":
        handleRetryDownload(currentLogEntry);
        break;
      default:
        break;
    }
  } catch (error) {
    console.error("Error handling context menu action:", error);
    showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.", "error");
  } finally {
    hideContextMenu();
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏–¥–µ–æ
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 */
async function handleOpenVideo(filePath) {
  try {
    const fileExists = await window.electron.invoke(
      "check-file-exists",
      filePath,
    );
    if (!fileExists) {
      showToast("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω.", "error");
      return;
    }
    await window.electron.invoke("open-last-video", filePath);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∏–¥–µ–æ:", error);
    showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∏–¥–µ–æ.", "error");
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 */
async function handleOpenFolder(filePath) {
  try {
    const fileExists = await window.electron.invoke(
      "check-file-exists",
      filePath,
    );
    if (!fileExists) {
      showToast("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω.", "error");
      return;
    }
    await window.electron.invoke("open-download-folder", filePath);
    showToast("–ü–∞–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ.", "success");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏:", error);
    showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏.", "error");
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∞–π—Ç–∞
 * @param {HTMLElement} logEntry - –≠–ª–µ–º–µ–Ω—Ç –ª–æ–≥–∞
 */
async function handleOpenSite(logEntry) {
  const url = logEntry.querySelector(".text").getAttribute("data-url");
  if (url) {
    try {
      await window.electron.invoke("open-external-link", url);
    } catch (error) {
      console.error("Error opening site:", error);
      showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–∞–π—Ç–∞.", "error");
    }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
 * @param {HTMLElement} logEntry - –≠–ª–µ–º–µ–Ω—Ç –ª–æ–≥–∞
 */
async function handleDeleteEntry(logEntry) {
  const entryId = logEntry.getAttribute("data-id");
  if (!entryId) {
    console.error("No ID found for the entry. Aborting deletion.");
    return;
  }

  const entryName = logEntry.querySelector(".text").textContent.trim();
  const entryDateTime = logEntry.querySelector(".date-time").textContent.trim();
  const entryQuality = logEntry.querySelector(".quality").textContent.trim();
  const formattedName = entryName
    .replace(entryDateTime, "")
    .replace(entryQuality, "")
    .trim();
  const confirmationMessage = `
    <h4 class="toast-warning">–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?</h4>
    <br>
    <div class="info-entry">
        <div class="date-time-quality">
            <span class="date-time">
              <i class="fa-solid fa-clock"></i> ${entryDateTime}
            </span>
            <span class="quality">
              <i class="fa-regular fa-rectangle-list"></i>${entryQuality}
            </span>
        </div>
        <span class="info-note">
            <p><i class="fa-solid fa-film"></i>
            ${formattedName}</p>
        </span>
    </div>
    `;

  const confirmed = await showConfirmationDialog(confirmationMessage);
  if (!confirmed) return;

  try {
    console.log(`–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ DOM \n"${formattedName}"`);
    logEntry.remove(); // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ DOM

    const { currentHistory, wasDeleted } =
      await deleteEntryFromHistory(entryId); // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    setHistoryData(currentHistory);
    console.log("üìÅ (ContextMenu) –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:", getHistoryData());
    filterAndSortHistory(state.currentSearchQuery, state.currentSortOrder, true);

    if (wasDeleted) {
      await updateDownloadCount();
      sortHistory(state.currentSortOrder);
      showToast(
        `–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞<br><strong>${formattedName}</strong>.`,
        "success",
      );
    } else {
      console.warn("No entry was removed. Possible ID mismatch.");
      showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", "error");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error);
    showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.", "error");
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (—Ñ–∞–π–ª–∞)
 * @param {string} entryId - ID –∑–∞–ø–∏—Å–∏
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Ñ–ª–∞–≥–æ–º —É–¥–∞–ª–µ–Ω–∏—è
 */
async function deleteEntryFromHistory(entryId) {
  let currentHistory = await window.electron.invoke("load-history");
  const initialHistoryLength = currentHistory.length;

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
  currentHistory = currentHistory.filter(
    (entry) => entry.id !== Number(entryId),
  );

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
  await window.electron.invoke("save-history", currentHistory);

  const wasDeleted = currentHistory.length < initialHistoryLength;
  return { currentHistory, wasDeleted };
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –¥–∏—Å–∫–∞
 * @param {HTMLElement} logEntry - –≠–ª–µ–º–µ–Ω—Ç –ª–æ–≥–∞
 */
async function handleDeleteFile(logEntry) {
  const filePath = logEntry
    .querySelector(".text")
    .getAttribute("data-filepath");
  if (!filePath) {
    showToast("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
  try {
    const fileExists = await window.electron.invoke(
      "check-file-exists",
      filePath,
    );
    if (!fileExists) {
      showToast("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.", "warning");
      return;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
    showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞.", "error");
    return;
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
  const fileName = logEntry
    .querySelector(".text")
    .getAttribute("data-filename");
  const entryDateTime = logEntry.querySelector(".date-time").textContent.trim();
  const entryQuality = logEntry.querySelector(".quality").textContent.trim();
  const confirmationMessage = `
    <h4 class="toast-warning">–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª?</h4>
    <br>
    <div class="info-entry">
        <div class="date-time-quality">
            <span class="date-time">
              <i class="fa-solid fa-clock"></i>${entryDateTime}
            </span>
            <span class="quality">
              <i class="fa-regular fa-rectangle-list"></i>${entryQuality}
            </span>
        </div>
        <span class="info-delete">
            <p><i class="fa-solid fa-film"></i>
            ${fileName}</p>
        </span>
    </div>
    `;

  const confirmed = await showConfirmationDialog(confirmationMessage);
  if (!confirmed) return;

  try {
    const deletionResult = await window.electron.invoke(
      "delete-file",
      filePath,
    );
    if (deletionResult) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
      logEntry.querySelector(".text").removeAttribute("data-filepath");
      logEntry.classList.add("file-deleted");
      logEntry.querySelector(".text").innerHTML +=
        ' <span class="file-deleted-label">(—Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω)</span>';
      showToast(
        `–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω: <strong>${fileName}</strong>.`,
        "success",
      );
    } else {
      // –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ delete-file –≤–µ—Ä–Ω—É–ª false –∏–ª–∏ –¥—Ä—É–≥—É—é –Ω–µ—É–¥–∞—á–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
      showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª.", "error");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
    showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.", "error");
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 * @returns {Promise<boolean>} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, –∏–Ω–∞—á–µ false
 */
async function showConfirmationDialog(message) {
  return new Promise((resolve) => {
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ showConfirmationDialog –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
    showConfirmationModal(
      message,
      () => {
        resolve(true); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
      },
      () => {
        resolve(false); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
      },
    );
  });
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
 * @param {HTMLElement} logEntry - –≠–ª–µ–º–µ–Ω—Ç –ª–æ–≥–∞
 */
function handleRetryDownload(logEntry) {
  const retryUrl = logEntry.querySelector(".text").getAttribute("data-url");
  const fileName = logEntry
    .querySelector(".text")
    .getAttribute("data-filename");
  if (retryUrl) {
    urlInput.value = retryUrl; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π urlInput
    updateButtonState();

    downloadButton.classList.remove("disabled");
    downloadButton.classList.add("active");

    showToast(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: <strong>${fileName}</strong>.`, "warning");
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
 */
function initContextMenu() {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏
  if (history) {
    history.addEventListener("contextmenu", async (event) => {
      const logEntry = event.target.closest(".log-entry");
      if (logEntry) {
        await showContextMenu(event, logEntry);
      }
    });

    history.addEventListener("click", async (event) => {
      const logEntry = event.target.closest(".log-entry");
      if (!logEntry) return;

      try {
        if (event.target.matches(".log-entry img")) {
          const url = logEntry.querySelector(".text").getAttribute("data-url");
          if (url) {
            await window.electron.invoke("open-external-link", url);
          }
        } else {
          const filePath = logEntry
            .querySelector(".text")
            .getAttribute("data-filepath");
          if (filePath) {
            await window.electron.invoke("open-last-video", filePath);
          }
        }
      } catch (error) {
        console.error("Error handling history click:", error);
        showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏.", "error");
      }
    });
  }

  // –°–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
  document.addEventListener("click", hideContextMenu);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –º–µ–Ω—é
  contextMenu.addEventListener("click", handleContextMenuClick);
}

export { initContextMenu, handleDeleteEntry };
